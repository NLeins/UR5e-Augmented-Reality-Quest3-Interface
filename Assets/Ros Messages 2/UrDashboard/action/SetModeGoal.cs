//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.UrDashboard
{
    [Serializable]
    public class SetModeGoal : Message
    {
        public const string k_RosMessageName = "ur_dashboard_msgs/SetMode";
        public override string RosMessageName => k_RosMessageName;

        //  This action is for setting the robot into a desired mode (e.g. RUNNING) and safety mode into a
        //  non-critical state (e.g. NORMAL or REDUCED), for example after a safety incident happened.
        //  goal
        public sbyte target_robot_mode;
        //  Stop program execution before restoring the target mode. Can be used together with 'play_program'.
        public bool stop_program;
        //  Play the currently loaded program after target mode is reached.#
        //  NOTE: Requesting mode RUNNING in combination with this will make the robot continue the motion it
        //  was doing before. This might probably lead into the same problem (protective stop, EM-Stop due to
        //  faulty motion, etc.) If you want to be safe, set the 'stop_program' flag below and manually play
        //  the program after robot state is returned to normal.
        //  This flag will only be used when requesting mode RUNNING
        public bool play_program;

        public SetModeGoal()
        {
            this.target_robot_mode = 0;
            this.stop_program = false;
            this.play_program = false;
        }

        public SetModeGoal(sbyte target_robot_mode, bool stop_program, bool play_program)
        {
            this.target_robot_mode = target_robot_mode;
            this.stop_program = stop_program;
            this.play_program = play_program;
        }

        public static SetModeGoal Deserialize(MessageDeserializer deserializer) => new SetModeGoal(deserializer);

        private SetModeGoal(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.target_robot_mode);
            deserializer.Read(out this.stop_program);
            deserializer.Read(out this.play_program);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_robot_mode);
            serializer.Write(this.stop_program);
            serializer.Write(this.play_program);
        }

        public override string ToString()
        {
            return "SetModeGoal: " +
            "\ntarget_robot_mode: " + target_robot_mode.ToString() +
            "\nstop_program: " + stop_program.ToString() +
            "\nplay_program: " + play_program.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
